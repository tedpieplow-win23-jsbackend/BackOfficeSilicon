@page "/editcourse/{courseId}"
@using System.Text
@using System.Text.Json

@inject NavigationManager NavigationManager
@inject CourseService CourseService
@inject IConfiguration Configuration

@rendermode InteractiveServer

<section class="course-edit">
    @if (course != null)
    {
        <div>
            <div>
                <label>Title</label>
                <input type="text" @bind="course.Title" class="form-control" />
            </div>
            <div>
                <label>Ingress</label>
                <textarea @bind="course.Ingress" class="form-control"></textarea>
            </div>
            <div>
                <label>Star Rating</label>
                <input type="number" step="0.1" @bind="course.StarRating" class="form-control" />
            </div>
            <div>
                <label>Reviews</label>
                <input type="text" @bind="course.Reviews" class="form-control" />
            </div>
            <div>
                <label>Likes in Percent</label>
                <input type="text" @bind="course.LikesInPercent" class="form-control" />
            </div>
            <div>
                <label>Likes</label>
                <input type="text" @bind="course.Likes" class="form-control" />
            </div>
            <div>
                <label>Hours</label>
                <input type="text" @bind="course.Hours" class="form-control" />
            </div>

            <div>
                <label>Authors</label>
                @if (course.Authors != null && course.Authors.Any())
                {
                    @foreach (var author in course.Authors)
                    {
                        <div>
                            <input type="text" @bind="@author.Name" class="form-control" />
                        </div>
                    }
                }
            </div>

            <div>
                <label>Description</label>
                <textarea @bind="course.Content!.Description" class="form-control"></textarea>
            </div>

            <div>
                <label>Includes</label>
                @if (course!.Content!.Includes != null)
                {
                    @for (int i = 0; i < tempIncludes.Count; i++)
                    {
                        var currentIndex = i;
                        <div>
                            <input type="text" value="@tempIncludes[i]" @oninput="(e) => UpdateInclude(currentIndex, e.Value!.ToString()!)" class="form-control" />
                        </div>
                    }
                }
            </div>

            <div>
                <label>Program Details</label>
                @if (course!.Content!.ProgramDetails != null && course.Content.ProgramDetails.Any())
                {
                    @for (int i = 0; i < course.Content.ProgramDetails.Count; i++)
                    {
                        var programDetail = course.Content.ProgramDetails[i];

                        <div>
                            <input type="text" @bind="programDetail.Title" class="form-control" />
                            <textarea @bind="programDetail.Description" class="form-control"></textarea>
                        </div>
                    }
                }
            </div>
            <div>
                <label>Image Uri</label>
                <input type="text" @bind="course.ImageUri" class="form-control" />
            </div>
            <div>
                <label>Image Header Uri</label>
                <input type="text" @bind="course.ImageHeaderUri" class="form-control" />
            </div>
            <div>
                <label>Is Bestseller</label>
                <input type="checkbox" @bind="course.IsBestseller" />
            </div>
            <div>
                <label>Is Digital</label>
                <input type="checkbox" @bind="course.IsDigital" />
            </div>

            <button class="btn btn-primary" @onclick="() => UpdateCourseAsync(course)">Save Changes</button>
            <button class="btn btn-secondary" @onclick="CancelUpdate">Cancel</button>
        </div>
    }
    else
    {
        <p>Loading...</p>
    }
</section>


@code {
    [Parameter]
    public EventCallback<string> OnClick { get; set; }
    [Parameter]
    public string CourseId { get; set; } = null!;
    private CourseCard? course;
    private List<string> tempIncludes = new List<string>();


    protected override async Task OnInitializedAsync()
    {
        await LoadCourse();
        InitializeTempIncludes();
    }

    private void InitializeTempIncludes()
    {
        if (course?.Content?.Includes != null)
        {
            tempIncludes = new List<string>(course.Content.Includes);
        }
        else
        {
            tempIncludes = new List<string>();
        }
    }

    private void UpdateInclude(int index, string value)
    {
        if (index >= 0 && index < tempIncludes.Count)
        {
            tempIncludes[index] = value;
        }
    }

    private async Task LoadCourse()
    {
        try
        {
            course = await CourseService.GetCourseToUpdateByIdAsync(CourseId);
            if (course?.Content?.Includes == null)
            {
                course!.Content!.Includes = new List<string>();
            }

            tempIncludes = new List<string>(course.Content.Includes);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading course: {ex.Message}");
        }
    }

    private async Task UpdateCourseAsync(CourseCard courseInput)
    {
        courseInput.Content!.Includes = tempIncludes;
        var input = CourseService.MapCourseCardToUpdateRequest(courseInput, tempIncludes);

        try
        {
            var updatedCourse = await CourseService.UpdateCourseAsync(courseInput);

            if (updatedCourse != null)
            {
                course = updatedCourse;
                await OnClick.InvokeAsync("");
            }
        }
        catch (Exception)
        {
            throw;
        }
    }

    public async Task CancelUpdate()
    {
        await OnClick.InvokeAsync("");
    }
}
