@page "/editcourse/{courseId}"

@inject NavigationManager NavigationManager
@inject CourseService CourseService

<section class="course-edit">

    @if (course != null)
    {
        <div>
            <div>
                <label>Title</label>
                <input type="text" @bind="course.Title" class="form-control" />
            </div>
            <div>
                <label>Ingress</label>
                <textarea @bind="course.Ingress" class="form-control"></textarea>
            </div>
            <div>
                <label>Star Rating</label>
                <input type="number" step="0.1" @bind="course.StarRating" class="form-control" />
            </div>
            <div>
                <label>Reviews</label>
                <input type="text" @bind="course.Reviews" class="form-control" />
            </div>
            <div>
                <label>Likes in Percent</label>
                <input type="text" @bind="course.LikesInPercent" class="form-control" />
            </div>
            <div>
                <label>Likes</label>
                <input type="text" @bind="course.Likes" class="form-control" />
            </div>
            <div>
                <label>Hours</label>
                <input type="text" @bind="course.Hours" class="form-control" />
            </div>
            <div>
                <label>Authors</label>
                @if (course.Authors != null && course.Authors.Any())
                {
                    foreach (var author in course.Authors)
                    {
                        <div>
                            @author.Name
                        </div>
                    }
                }
            </div>
            <div>
                <label>Description</label>
                <textarea @bind="course.Content!.Description" class="form-control"></textarea>
            </div>
            <div>
                <label>Includes</label>
                @if (course.Content.Includes != null && course.Content.Includes.Any())
                {
                    @for (int i = 0; i < course.Content.Includes.Count; i++)
                    {
                        <div>
                            <input type="text" @bind="course.Content.Includes[i]" class="form-control" />
                        </div>
                    }
                }
            </div>

            <div>
                <label>Program Details</label>
                @if (course.Content.ProgramDetails != null && course.Content.ProgramDetails.Any())
                {
                    @for (int i = 0; i < course.Content.ProgramDetails.Count; i++)
                    {
                        <div>
                            <input type="text" @bind="course.Content.ProgramDetails[i].Title" class="form-control" />
                            <textarea @bind="course.Content.ProgramDetails[i].Description" class="form-control"></textarea>
                        </div>
                    }
                }
            </div>
            <div>
                <label>Image Uri</label>
                <input type="text" @bind="course.ImageUri" class="form-control" />
            </div>
            <div>
                <label>Image Header Uri</label>
                <input type="text" @bind="course.ImageHeaderUri" class="form-control" />
            </div>
            <div>
                <label>Is Bestseller</label>
                <input type="checkbox" @bind="course.IsBestseller" />
            </div>
            <div>
                <label>Is Digital</label>
                <input type="checkbox" @bind="course.IsDigital" />
            </div>

            <button class="btn btn-primary" @onclick="UpdateCourseAsync">Save Changes</button>
            <button class="btn btn-secondary" @onclick="CancelUpdate">Cancel</button>
        </div>
    }

</section>
else
{
<p>Loading...</p>
}


@code {
    [Parameter]
    public string courseId { get; set; } = null!;
    private CourseCard? course;


    protected override async Task OnInitializedAsync()
    {
        course = await CourseService.GetCourseToUpdateByIdAsync(courseId);
    }

    private async Task UpdateCourseAsync()
    {

    }

    private async Task CancelUpdate()
    {
        NavigationManager.NavigateTo("courses");
    }
}
