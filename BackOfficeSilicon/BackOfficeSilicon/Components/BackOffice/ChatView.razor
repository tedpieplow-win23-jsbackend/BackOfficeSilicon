@rendermode InteractiveAuto

@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject UserService UserService
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>ChatView</h3>
<div class="row">
    <div class="col">
        <div class="card">
            <div class="card-header">Chat</div>
            <div class="card-body">
                <ul class="list-group">
                    @foreach (var message in messages)
                    {
                        <li class="mb-3 list-group-item @(message.UserName == userName ? "chat-bubble-right" : "chat-bubble-left")" >
                            <div>
                                <strong>@message.UserName</strong> <span>@message.Created.ToString("HH:mm:ss")</span>
                            </div>
                            <div>@message.Message</div>
                        </li>
                    }
                </ul>

                <div class="mt-3" style="height: 20px;">
                    @if (!string.IsNullOrEmpty(typingUser))
                    {
                        <div>@typingUser is typing <span class="typing-indicator">...</span></div>
                    }
                </div>
            </div>
            <div class="card-footer">
                <div class="mt-2">
                    <textarea class="form-control" placeholder="Message" @bind="currentMessage" @oninput="NotifyTyping"></textarea>
                </div>
                <div class="col-2 my-3">
                    <button class="btn btn-success w-100" @onclick="Send">Send Message</button>
                </div>
            </div>
        </div>
    </div>

</div>
@code {
    private HubConnection? connection;
    private bool isConnected => connection?.State == HubConnectionState.Connected;
    private string? userName;
    private string? typingUser;
    private System.Timers.Timer? typingTimer;



    private List<ChatMessage> messages = new();
    private string? currentMessage;

    private async Task NotifyTyping() => await connection!.SendAsync("Typing", userName);

    private async Task Send()
    {
        var message = new ChatMessage { UserName = userName, Message = currentMessage, Created = DateTime.Now };
        await connection!.SendAsync("SendMessageToAll", message.UserName, message.Message, message.Created);
        currentMessage = string.Empty;

    }

    protected override async Task OnInitializedAsync()
    {
        var user = await UserService.GetUserAsync();

        userName = user.UserName;

        connection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/chathub")).Build();

        connection.On<string,  string, DateTime>("ReceiveMessage", (fromUser,  message, dateTime) =>
        {
            var newNessage = new ChatMessage { UserName = fromUser, Message = message };
            messages.Add(newNessage);
            InvokeAsync(StateHasChanged);
        });

        connection.On<string>("UserTyping", (typingUserName) =>
        {
            typingUser = typingUserName;
            InvokeAsync(StateHasChanged);

            typingTimer?.Stop();
            typingTimer = new System.Timers.Timer(2000);
            typingTimer.Elapsed += (s, e) =>
            {
                typingUser = null;
                InvokeAsync(StateHasChanged);
            };

            typingTimer.Start();
        });

        await connection.StartAsync();
    }
}
