@inject IdentityRedirectManager RedirectManager
@inject NavigationManager NavigationManager
@using System.Text
@using BackOfficeSilicon.Components.Account
@using BackOfficeSilicon.Models
@using Microsoft.AspNetCore.Components.QuickGrid

@rendermode InteractiveServer

<div class="container newsletter">
    <h1>Newsletter</h1>

    <div class="options-bar">
    </div>
    <div class="content-box">
@*         <div class="content-item-dark column-titles">
            <p>Delete Update</p>
            <p>Is subscribed</p>
            <p>Daily newsletter</p>
            <p>Advertising updates</p>
            <p>Week in review</p>
            <p>Event updates</p>
            <p>Startups weekly</p>
            <p>Podcasts</p>

            <p>Email</p>
        </div> *@

        <QuickGrid Items="List.AsQueryable()" Class="quickgrid-table">

            <PropertyColumn Property="l => l.Email" Title ="Email" Sortable="true"/>
            <TemplateColumn Title="Is Subscribed">
                <p><i class="fa-solid @GetIcon(context.IsSubscribed)"></i></p>
            </TemplateColumn>
            <TemplateColumn Title="Daily Newsletter">
                <p><i class="fa-solid @GetIcon(context.DailyNewsLetter)"></i></p>
            </TemplateColumn>
            <TemplateColumn Title="Advertising Updates">
                <p><i class="fa-solid @GetIcon(context.AdvertisingUpdates)"></i></p>
            </TemplateColumn>
            <TemplateColumn Title="Week In Reviews">
                <p><i class="fa-solid @GetIcon(context.WeekInReviews)"></i></p>
            </TemplateColumn>
            <TemplateColumn Title="Event Updates">
                <p><i class="fa-solid @GetIcon(context.EventUpdates)"></i></p>
            </TemplateColumn>
            <TemplateColumn Title="Startups Weekly">
                <p><i class="fa-solid @GetIcon(context.StartupsWeekly)"></i></p>
            </TemplateColumn>
            <TemplateColumn Title="Podcasts">
                <p><i class="fa-solid @GetIcon(context.Podcasts)"></i></p>
            </TemplateColumn>
            <TemplateColumn Title="Delete">
                <button class="btn-red" @onclick="() => DeleteAsync(context.Email)"><i class="fa-solid fa-trash"></i></button>
            </TemplateColumn>
            <TemplateColumn Title="Update">
                <button class="btn-theme" @onclick="() => Update(context.Email)"><i class="fa-solid fa-pen"></i></button>
            </TemplateColumn>
        </QuickGrid>

@*         @{int i = 0;}
        @foreach (var item in List)
        {
            <div class="@GetItemClass()">
                <div class="button-box">
                    <button class="btn-red" @onclick="() => DeleteAsync(item.Email)"><i class="fa-solid fa-trash"></i></button>
                    <button class="btn-theme" @onclick="() => Update(item.Email)"><i class="fa-solid fa-pen"></i></button>
                </div>
                <p><i class="fa-solid @GetIcon(item.IsSubscribed)"></i></p>
                <p><i class="fa-solid @GetIcon(item.DailyNewsLetter)"></i></p>
                <p><i class="fa-solid @GetIcon(item.AdvertisingUpdates)"></i></p>
                <p><i class="fa-solid @GetIcon(item.WeekInReviews)"></i></p>
                <p><i class="fa-solid @GetIcon(item.EventUpdates)"></i></p>
                <p><i class="fa-solid @GetIcon(item.StartupsWeekly)"></i></p>
                <p><i class="fa-solid @GetIcon(item.Podcasts)"></i></p>
                <div class="content-item-email">
                    <p>@item.Email</p>
                </div>
            </div>
            IsDark = (i % 2 == 0);
            i++;
        } *@
    </div>
</div>
@code {
    [Parameter]
    public EventCallback<string> OnClick { get; set; }

    private string GetIcon(bool value) => value ? "fa-check green" : "fa-xmark red";

    private IEnumerable<NewsletterModel> List { get; set; } = [];

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            var result = await GetSubscribersAsync();
            List = result;
        }
        catch (Exception) { }
    }


    public async Task Update(string Email)
    {
        await OnClick.InvokeAsync(Email);
        // NavigationManager.NavigateTo($"/newsletter/edit?Email={Email}");
        // return Task.CompletedTask;
    } 


    private async Task DeleteAsync(string email)
    {

        var json = JsonConvert.SerializeObject(new { Email = email });
        var content = new StringContent(json, Encoding.UTF8, "application/json");
        var response = await Http.PostAsync("https://subscriptionprovider-silicon.azurewebsites.net/api/DeleteSubscriptionFunction?code=3wlaFTtqNVe95fdX25jr896B8mZY72fmJIcxAcb0cl9xAzFu_GqyCg%3D%3D", content);

        var result = await GetSubscribersAsync();
        if (result != null && result.Any())
        {
            List = result;
            StateHasChanged();
        }
    }



    public async Task<IEnumerable<NewsletterModel>> GetSubscribersAsync()
    {
        try
        {
            var result = await Http.PostAsync("https://subscriptionprovider-silicon.azurewebsites.net/api/GetSubscribersFunction?code=VdUem1ardDpuXjfbHNodWR6NRuTneq6ZTFo3n_8r7fHZAzFutbdzXA==", null);
            if (result.IsSuccessStatusCode)
            {
                var list = await result.Content.ReadFromJsonAsync<IEnumerable<NewsletterModel>>();
                if(list!.Any())
                    return list!;
            }
        }
        catch(Exception ex)
        {
        }
        return null!;
    }
}
