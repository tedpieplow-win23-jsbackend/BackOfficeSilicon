@inject IdentityRedirectManager RedirectManager
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject NewsletterService NewsletterService
@using System.Text
@using BackOfficeSilicon.Components.Account
@using BackOfficeSilicon.Models
@using Microsoft.AspNetCore.Components.QuickGrid

@rendermode InteractiveServer

<div class="container newsletter">
    <h1>Newsletter</h1>

    <div class="options-bar">
    </div>
    <div class="content-box">
        <QuickGrid Items="List.AsQueryable()" Pagination="Pagination" Class="quickgrid-table">

            <PropertyColumn Property="l => l.Email" Title ="Email" Sortable="true"/>
            <TemplateColumn Title="Subscribed">
                <div class="center-content">
                    <p><i class="fa-solid @GetIcon(context.IsSubscribed)"></i></p>
                </div>
            </TemplateColumn>
            <TemplateColumn Title="Daily">
                <div class="center-content">
                    <p><i class="fa-solid @GetIcon(context.DailyNewsLetter)"></i></p>

                </div>
            </TemplateColumn>
            <TemplateColumn Title="Advertising">
                <div class="center-content">
                    <p><i class="fa-solid @GetIcon(context.AdvertisingUpdates)"></i></p>

                </div>
            </TemplateColumn>
            <TemplateColumn Title="Weekly">
                <div class="center-content">
                    <p><i class="fa-solid @GetIcon(context.WeekInReviews)"></i></p>

                </div>
            </TemplateColumn>
            <TemplateColumn Title="Event">
                <div class="center-content">
                    <p><i class="fa-solid @GetIcon(context.EventUpdates)"></i></p>

                </div>
            </TemplateColumn>
            <TemplateColumn Title="Startups">
                <div class="center-content">
                    <p><i class="fa-solid @GetIcon(context.StartupsWeekly)"></i></p>
                </div>
                
            </TemplateColumn>
            <TemplateColumn Title="Podcasts">
                <div class="center-content">
                    <p><i class="fa-solid @GetIcon(context.Podcasts)"></i></p>
                </div>
                
            </TemplateColumn>
            <TemplateColumn Title="Delete">
                <button class="btn-red" @onclick="() => DeleteAsync(context.Email)"><i class="fa-solid fa-trash"></i></button>
            </TemplateColumn>
            <TemplateColumn Title="Update">
                <button class="btn-theme" @onclick="() => Update(context.Email)"><i class="fa-solid fa-pen"></i></button>
            </TemplateColumn>
        </QuickGrid>
        <Paginator State="Pagination" />
    </div>
</div>
@code {
    [Parameter]
    public EventCallback<string> OnClick { get; set; }

    private string GetIcon(bool value) => value ? "fa-check green" : "fa-xmark red";

    private IEnumerable<NewsletterModel> List { get; set; } = [];

    PaginationState Pagination = new PaginationState { ItemsPerPage = 10 };

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            var result = await NewsletterService.GetSubscribersAsync();
            List = result;
        }
        catch (Exception) { }
    }


    public async Task Update(string Email)
    {
        await OnClick.InvokeAsync(Email);
    } 


    private async Task DeleteAsync(string email)
    {
        var result = await NewsletterService.DeleteAsync(email);
        if (result != null && result.Any())
        {
            List = result;
            StateHasChanged();
        }
    }
}
