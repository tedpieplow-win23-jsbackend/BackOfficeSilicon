@page "/newsletter/edit"
@using BackOfficeSilicon.Models
@using BackOfficeSilicon.Services
@inject NewsletterService newsletterService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
<div class="container newsletter-form">
    <EditForm FormName="subscribeform" Model="SubscribeForm" OnValidSubmit="OnSubmit" id="subscribe-form" method="post" novalidate>
        <DataAnnotationsValidator />
        <div class="checkbox-content">
            <div class="checkboxes">
                <div class="box">
                    <InputCheckbox @bind-Value="SubscribeForm.IsSubscribed" />
                    <label>Is Subscribed</label>
                </div>
                <div class="box">
                    <InputCheckbox @bind-Value="SubscribeForm.AdvertisingUpdates" />
                    <label>Advertising Updates</label>
                </div>
                <div class="box">
                    <InputCheckbox @bind-Value="SubscribeForm.DailyNewsLetter" />
                    <label>Daily newsletter</label>
                </div>
                <div class="box">
                    <InputCheckbox @bind-Value="SubscribeForm.EventUpdates" />
                    <label>Event Updates</label>
                </div>
                <div class="box">
                    <InputCheckbox @bind-Value="SubscribeForm.Podcasts" />
                    <label>Podcasts</label>
                </div>
                <div class="box">
                    <InputCheckbox @bind-Value="SubscribeForm.StartupsWeekly" />
                    <label>Startups Weekly</label>
                </div>
                <div class="box">
                    <InputCheckbox @bind-Value="SubscribeForm.WeekInReviews" />
                    <label>Week In Reviews</label>
                </div>
            </div>
        </div>
        <div class="subscribe">
            <InputText @bind-Value="SubscribeForm.Email" id="input-email" type="email" placeholder="Your Email" />
            <button id="submit-button" type="submit" class="btn-theme"><span>Update</span></button>
            <ValidationMessage For="() => SubscribeForm.Email" class="text-danger" />
        </div>
    </EditForm>
</div>
@code {
    [SupplyParameterFromForm]
    public NewsletterModel SubscribeForm { get; set; } = new();

    [Parameter]
    public string? Email { get; set; }
    [Parameter]
    public EventCallback<string> OnClick { get; set; }

    NewsletterModel Model { get; set; } = new NewsletterModel();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!string.IsNullOrEmpty(Email))
            {
                SubscribeForm = await newsletterService.GetSubscribersAsync(Email!);
            }
        }
        catch (Exception) { }
    }
    public async Task OnSubmit()
    {

            var result = await newsletterService.UpdateSubscriberAsync(SubscribeForm);
            if (result)
                await OnClick.InvokeAsync("");
                NavigationManager.NavigateTo("/backoffice?string=newsletter");
            

    }
}
