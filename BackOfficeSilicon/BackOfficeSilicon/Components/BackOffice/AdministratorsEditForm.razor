@inject AdminService AdminService
@inject UserManager<ApplicationUser> UserManager
@inject ILogger<AdministratorsView> Logger

@rendermode InteractiveServer

<div class="container">
    @if (!string.IsNullOrEmpty(StatusMessage))
    {
        <div class="alert alert-danger w-50 text-lg-center">
            @StatusMessage
        </div>
    }
    <EditForm FormName="administrators" Model="AdminModel" OnValidSubmit="UpdateAdmin" id="admin-form" method="post" novalidate>
        <DataAnnotationsValidator />
        <div class="admin-content">
            <div class="inputs">
                <div class="box">
                    <label>Email</label>
                    <InputText @bind-Value="AdminModel.Email" type="email" />
                    <ValidationMessage For="() => AdminModel.Email" class="text-danger" />
                </div>
                <div class="box">
                    <label>First Name</label>
                    <InputText @bind-Value="AdminModel.FirstName" />
                </div>
                <div class="box">
                    <label>Last Name</label>
                    <InputText @bind-Value="AdminModel.LastName" />
                </div>
            </div>
        </div>
        <div class="admin-buttons">
            <button type="submit" class="btn-theme"><span>Update</span></button>
            <button @onclick="Cancel" class="btn-gray"><span>Cancel</span></button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    public EventCallback<string> OnClick { get; set; }

    [Parameter]
    public string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? StatusMessage { get; set; }

    [SupplyParameterFromForm]
    private AdministratorModel AdminModel { get; set; } = new();

    private ApplicationUser Admin { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Admin = await UserManager.FindByEmailAsync(Email!)!;
            AdminModel.Email = Admin!.Email!;
            AdminModel.FirstName = Admin.FirstName;
            AdminModel.LastName = Admin.LastName;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    public async Task UpdateAdmin()
    {
        var updateResult = await AdminService.UpdateAdminAsync(Admin, AdminModel);
        if (updateResult.Succeeded)
            await OnClick.InvokeAsync("");

        StatusMessage = "Failed to update.";
    }

    public async Task Cancel()
    {
        await OnClick.InvokeAsync("");
    }
}