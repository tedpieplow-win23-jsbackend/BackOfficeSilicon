@using BackOfficeSilicon.Models
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<div class="container courses-view">

    <h1>CoursesView</h1>

    <button id="create-course-button" class="btn-theme" @onclick="CreateCourseAsync"><i class="fa-solid fa-pen"></i> Create new course</button>

    @if (courses != null && courses.Any())
    {
        <QuickGrid Items="courses.AsQueryable()" Class="quickgrid-table" Pagination="Pagination">
            <PropertyColumn Property="c => c.Id" Title="ID" Sortable="true" />
            <PropertyColumn Property="c => c.Title" Title="Title" Sortable="true" />
            <TemplateColumn Title="Update">
                <button class="btn btn-sm btn-theme" @onclick="(e) => UpdateCourseAsync(context.Id)"><i class="fa-solid fa-pen"></i></button>
            </TemplateColumn>
            <TemplateColumn Title="Delete">
                <button class="btn btn-sm btn-danger" @onclick="(e) => DeleteCourseAsync(context.Id)"><i class="fa-solid fa-trash"></i></button>
            </TemplateColumn>
        </QuickGrid>
        <Paginator State="Pagination" />
    }
    else
    {
        <p>No courses found.</p>
    }
</div>


@code {
    [Parameter]
    public EventCallback<string> OnClick { get; set; }
    private List<CourseCard>? courses = new();
    PaginationState Pagination = new PaginationState { ItemsPerPage = 6 };

    protected override async Task OnInitializedAsync()
    {
        await GetCoursesAsync();
    }

    private async Task GetCoursesAsync()
    {
        var query = new GraphQLQuery { Query = "{ getCourses { id title } }" };

        var response = await Http.PostAsJsonAsync(Configuration["GetCoursesProvider"], query);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<DynamicGraphQLResponse>();
            courses = result?.Data.GetProperty("getCourses").EnumerateArray()
                .Where(course => !string.IsNullOrEmpty(course.GetProperty("id").GetString()))
                .Select(course => new CourseCard
                    {
                        Id = course.TryGetProperty("id", out var idValue) ? idValue.GetString() ?? "" : "",
                        Title = course.GetProperty("title").GetString()
                    })
                .ToList();
        }
    }

    private async Task CreateCourseAsync()
    {
        await OnClick.InvokeAsync("Create");
    }

    public async Task UpdateCourseAsync(string courseId)
    {
        await OnClick.InvokeAsync(courseId);
    }

    private async Task DeleteCourseAsync(string courseId)
    {
        var query = new GraphQLQuery
        {
            Query = @" mutation deleteCourse($id: String!) { deleteCourses (id: $id)}",
            Variables = new { id = courseId }
        };

        var response = await Http.PostAsJsonAsync(Configuration["GetCoursesProvider"], query);

        if (response.IsSuccessStatusCode)
        {
            if (courses != null)
            {
                var courseToRemove = courses.FirstOrDefault(c => c.Id == courseId);
                if (courseToRemove != null)
                {
                    courses.Remove(courseToRemove);
                    await InvokeAsync(StateHasChanged);
                }
            }
        }
    }
}
