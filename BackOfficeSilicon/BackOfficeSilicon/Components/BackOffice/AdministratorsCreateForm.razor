@inject UserService UserService
@inject UserManager<ApplicationUser> UserManager
@inject ILogger<AdministratorsView> Logger

<div class="container administrators-form">
    <EditForm FormName="administrators" Model="AdminModel" OnValidSubmit="UpdateAdmin" id="admin-form" method="post" novalidate>
        <DataAnnotationsValidator />
        <div class="checkbox-content">
            <div class="checkboxes">
                <div class="box">
                    <InputText @bind-Value="AdminModel.Email" />
                    <label>Email</label>
                </div>
                <div class="box">
                    <InputText @bind-Value="AdminModel.FirstName" />
                    <label>FirstName</label>
                </div>
                <div class="box">
                    <InputText @bind-Value="AdminModel.LastName" />
                    <label>LastName</label>
                </div>
                <div class="box">
                    <InputText @bind-Value="AdminModel.Role" />
                    <label>LastName</label>
                </div>
            </div>
        </div>
        <div class="subscribe">
            @*             <InputText @bind-Value="SubscribeForm.Email" id="input-email" type="email" placeholder="Your Email" />
            <button id="submit-button" type="submit" class="btn-theme"><span>Update</span></button>
            <ValidationMessage For="() => SubscribeForm.Email" class="text-danger" /> *@
        </div>
    </EditForm>
</div>
@code {
    [Parameter]
    public EventCallback<string> OnClick { get; set; }

    [SupplyParameterFromForm]
    private AdministratorModel AdminModel { get; set; } = default!;

    private List<string> RolesList = ["SuperUser", "Administrator", "Author", "User"];

    protected override async void OnInitialized()
    {
        try
        {
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    public async Task UpdateAdmin()
    {

    }
}
