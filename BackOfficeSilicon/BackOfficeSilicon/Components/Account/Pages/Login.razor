@page "/"
@page "/signin"

@using System.ComponentModel.DataAnnotations
@using BackOfficeSilicon.Data
@using BackOfficeSilicon.Models
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IHttpContextAccessor HttpContextAccessor
@inject AuthenticationStateProvider Stateprovider
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Log in</PageTitle>


<section id="signin">
    <div class="main-holder container">

        @if (!string.IsNullOrEmpty(StatusMessage))
        {
            <div class="alert alert-danger w-50 text-lg-center">
                @StatusMessage
            </div>
        }

        <div class="section-title">
            <img src="images/silicon-logo-dark.svg" />
        </div>

        <div class="login-box">

            <EditForm FormName="signinform" Model="SignInForm" OnValidSubmit="SignIn" method="post" novalidate>
                <DataAnnotationsValidator />
                <div class="email">
                    <div class="validation">
                        <ValidationMessage For="() => SignInForm.Email" class="text-danger" />
                    </div>
                    <i class="fa-regular fa-envelope"></i>
                    <InputText @bind-Value="SignInForm.Email" type="email" placeholder="EMAIL"/>
                </div>

                <div class="password">
                    <div class="validation">
                        <ValidationMessage For="() => SignInForm.Password" class="text-danger" />
                    </div>
                    <i class="fa-sharp fa-thin fa-lock"></i>
                    <InputText @bind-Value="SignInForm.Password" type="password" placeholder="PASSWORD" />
                </div>
                <div class="button-holder">
                    <button type="submit" class="btn-theme" disabled="@isBusy">Sign in</button>
                </div>
            </EditForm>
        </div>
    </div>
</section>

@code {
    private bool isBusy;

    [SupplyParameterFromQuery]
    private string? StatusMessage { get; set; }

    [SupplyParameterFromForm]
    private SignIn SignInForm { get; set; } = new();

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            var httpContext = HttpContextAccessor.HttpContext;
            if (HttpContext is not null)
            {
                if (HttpMethods.IsGet(HttpContext.Request.Method))
                {
                    // Clear the existing external cookie to ensure a clean login process
                    await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    [ValidateAntiForgeryToken]
    private async Task SignIn()
    {
        var result = await SignInManager.PasswordSignInAsync(SignInForm.Email, SignInForm.Password, SignInForm.RememberMe, false);

        if (result.Succeeded)
            NavigationManager.NavigateTo("/", true);
        else
            StatusMessage = "Failed to login, please try again";

        return;
    }
}
