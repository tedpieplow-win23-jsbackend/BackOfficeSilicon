@rendermode InteractiveWebAssembly
<h3>NewsLettersView</h3>
<div class="container newsletter">
    <h1>Newsletter</h1>
    @if (!List.Any())
    {
        <p>Loading...</p>
    }
    else
    {
        <div class="options-bar">
        </div>
        <div class="content-box">
            <div class="content-item column-titles">
                <p>Email</p>
                <p>Is subscribed</p>
                <p>Daily newsletter</p>
                <p>Advertising updates</p>
                <p>Week in review</p>
                <p>Event updates</p>
                <p>Startups weekly</p>
                <p>Podcasts</p>
                <p></p>
            </div>

            @foreach (var item in List)
            {
                <div class="content-item">
                    <p>@item.Email</p>
                    @if (item.IsSubscribed)
                    {
                        <p><i class="fa-solid fa-check"></i></p>
                    }
                    else
                    {
                        <p><i class="fa-solid fa-xmark"></i></p>
                    }
                    @if (item.DailyNewsLetter)
                    {
                        <p><i class="fa-solid fa-check"></i></p>
                    }
                    else
                    {
                        <p><i class="fa-solid fa-xmark"></i></p>
                    }
                    @if (item.AdvertisingUpdates)
                    {
                        <p><i class="fa-solid fa-check"></i></p>
                    }
                    else
                    {
                        <p><i class="fa-solid fa-xmark"></i></p>
                    }
                    @if (item.WeekInReviews)
                    {
                        <p><i class="fa-solid fa-check"></i></p>
                    }
                    else
                    {
                        <p><i class="fa-solid fa-xmark"></i></p>
                    }
                    @if (item.EventUpdates)
                    {
                        <p><i class="fa-solid fa-check"></i></p>
                    }
                    else
                    {
                        <p><i class="fa-solid fa-xmark"></i></p>
                    }
                    @if (item.StartupsWeekly)
                    {
                        <p><i class="fa-solid fa-check"></i></p>
                    }
                    else
                    {
                        <p><i class="fa-solid fa-xmark"></i></p>
                    }
                    @if (item.Podcasts)
                    {
                        <p><i class="fa-solid fa-check"></i></p>
                    }
                    else
                    {
                        <p><i class="fa-solid fa-xmark"></i></p>
                    }
                    <p><i class="fa-solid fa-pen"></i></p>
                </div>
            }
        </div>
    }
</div>
@code {
    private List<NewsletterModel> List { get; set; } = [];

    protected override async void OnInitialized()
    {

        // var newsletter = new NewsletterModel
        //     {
        //         Email = "test@domain.com",
        //         IsSubscribed = true,
        //         DailyNewsLetter = true,
        //         AdvertisingUpdates = true,
        //         WeekInReviews = true,
        //         EventUpdates = true,
        //         StartupsWeekly = true,
        //         Podcasts = true
        //     };
        // List.Add(newsletter);
        try
        {
            var result = await GetSubscribersAsync();
            if (result != null && result.Any())
            {
                foreach (var item in result)
                {
                    List.Add(item);
                }
            }
        }
        catch (Exception) { }
    }

    public async Task<IEnumerable<NewsletterModel>> GetSubscribersAsync()
    {
        try
        {
            HttpClient Http = new HttpClient();
            using var result = await Http.PostAsync("https://subscriptionprovider-silicon.azurewebsites.net/api/GetSubscribersFunction?code=VdUem1ardDpuXjfbHNodWR6NRuTneq6ZTFo3n_8r7fHZAzFutbdzXA==", null);
            if (result.IsSuccessStatusCode)
            {
                var list = await result.Content.ReadFromJsonAsync<IEnumerable<NewsletterModel>>();
                if (list!.Any())
                    return list!;
            }
        }
        catch (Exception ex)
        {
        }
        return null!;
    }

    public class NewsletterModel()
    {
        public string Email { get; set; } = null!;
        public bool IsSubscribed { get; set; }
        public bool DailyNewsLetter { get; set; }
        public bool AdvertisingUpdates { get; set; }
        public bool WeekInReviews { get; set; }
        public bool EventUpdates { get; set; }
        public bool StartupsWeekly { get; set; }
        public bool Podcasts { get; set; }
    }
}
